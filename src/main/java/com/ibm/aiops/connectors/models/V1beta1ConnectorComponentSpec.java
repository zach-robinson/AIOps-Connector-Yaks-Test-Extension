/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.aiops.connectors.models;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * ConnectorComponentSpec defines the desired state of ConnectorComponent
 */
@ApiModel(description = "ConnectorComponentSpec defines the desired state of ConnectorComponent")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-08-30T14:34:32.048Z[Etc/UTC]")
public class V1beta1ConnectorComponentSpec {
    public static final String SERIALIZED_NAME_API_TYPE = "apiType";
    public static final String SERIALIZED_NAME_CONFIG = "config";
    public static final String SERIALIZED_NAME_CONTROLLER_CONFIG = "controllerConfig";
    public static final String SERIALIZED_NAME_HOST = "host";
    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_API_TYPE)
    private ApiTypeEnum apiType;
    @SerializedName(SERIALIZED_NAME_CONFIG)
    private Object config;
    @SerializedName(SERIALIZED_NAME_CONTROLLER_CONFIG)
    private List<V1beta1ConnectorComponentSpecControllerConfig> controllerConfig = null;
    @SerializedName(SERIALIZED_NAME_HOST)
    private URI host;
    @SerializedName(SERIALIZED_NAME_TYPE)
    private String type;

    public V1beta1ConnectorComponentSpec apiType(ApiTypeEnum apiType) {

        this.apiType = apiType;
        return this;
    }

    /**
     * ApiType that is implemented by the connector
     *
     * @return apiType
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "ApiType that is implemented by the connector")

    public ApiTypeEnum getApiType() {
        return apiType;
    }

    public void setApiType(ApiTypeEnum apiType) {
        this.apiType = apiType;
    }

    public V1beta1ConnectorComponentSpec config(Object config) {

        this.config = config;
        return this;
    }

    /**
     * RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.
     *
     * @return config
     **/
    @ApiModelProperty(required = true, value = "RawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding.")

    public Object getConfig() {
        return config;
    }

    public void setConfig(Object config) {
        this.config = config;
    }

    public V1beta1ConnectorComponentSpec controllerConfig(List<V1beta1ConnectorComponentSpecControllerConfig> controllerConfig) {

        this.controllerConfig = controllerConfig;
        return this;
    }

    public V1beta1ConnectorComponentSpec addControllerConfigItem(V1beta1ConnectorComponentSpecControllerConfig controllerConfigItem) {
        if (this.controllerConfig == null) {
            this.controllerConfig = new ArrayList<V1beta1ConnectorComponentSpecControllerConfig>();
        }
        this.controllerConfig.add(controllerConfigItem);
        return this;
    }

    /**
     * Headers are additional headers that will get passed with requests to the host
     *
     * @return controllerConfig
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Headers are additional headers that will get passed with requests to the host")

    public List<V1beta1ConnectorComponentSpecControllerConfig> getControllerConfig() {
        return controllerConfig;
    }

    public void setControllerConfig(List<V1beta1ConnectorComponentSpecControllerConfig> controllerConfig) {
        this.controllerConfig = controllerConfig;
    }

    public V1beta1ConnectorComponentSpec host(URI host) {

        this.host = host;
        return this;
    }

    /**
     * Host where the the REST API can be accessed
     *
     * @return host
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Host where the the REST API can be accessed")

    public URI getHost() {
        return host;
    }

    public void setHost(URI host) {
        this.host = host;
    }

    public V1beta1ConnectorComponentSpec type(String type) {

        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     **/
    @ApiModelProperty(required = true, value = "")

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V1beta1ConnectorComponentSpec v1beta1ConnectorComponentSpec = (V1beta1ConnectorComponentSpec) o;
        return Objects.equals(this.apiType, v1beta1ConnectorComponentSpec.apiType) &&
                Objects.equals(this.config, v1beta1ConnectorComponentSpec.config) &&
                Objects.equals(this.controllerConfig, v1beta1ConnectorComponentSpec.controllerConfig) &&
                Objects.equals(this.host, v1beta1ConnectorComponentSpec.host) &&
                Objects.equals(this.type, v1beta1ConnectorComponentSpec.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(apiType, config, controllerConfig, host, type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class V1beta1ConnectorComponentSpec {\n");
        sb.append("    apiType: ").append(toIndentedString(apiType)).append("\n");
        sb.append("    config: ").append(toIndentedString(config)).append("\n");
        sb.append("    controllerConfig: ").append(toIndentedString(controllerConfig)).append("\n");
        sb.append("    host: ").append(toIndentedString(host)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * ApiType that is implemented by the connector
     */
    @JsonAdapter(ApiTypeEnum.Adapter.class)
    public enum ApiTypeEnum {
        OPENAPI("OpenAPI"),

        ASYNCAPI("AsyncAPI");

        private String value;

        ApiTypeEnum(String value) {
            this.value = value;
        }

        public static ApiTypeEnum fromValue(String value) {
            for (ApiTypeEnum b : ApiTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<ApiTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ApiTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ApiTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ApiTypeEnum.fromValue(value);
            }
        }
    }

}

